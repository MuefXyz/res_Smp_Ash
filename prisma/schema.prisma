// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model dengan role-based access
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  role        UserRole @default(SISWA)
  nis         String?  @unique // Nomor Induk Siswa
  nip         String?  @unique // Nomor Induk Pegawai (guru/staff)
  phone       String?
  address     String?
  isActive    Boolean  @default(true)
  avatar      String?
  cardId      String?  @unique // Card ID untuk QR Code/RFID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  notifications     Notification[]
  absences          Absence[]
  grades            Grade[]
  payments          Payment[]
  learningPosts     LearningPost[]
  subjects          Subject[] // Guru yang mengajar mata pelajaran
  schedules         TeacherSchedule[]
  attendanceLogs    TeacherAttendanceLog[]
  cardScans         CardScan[] // Log scan kartu
  classStudents     ClassStudent[] // Siswa di kelas
  homeroomClasses   Class[] // Kelas yang diwalikan (wali kelas)
  extracurriculars  Extracurricular[] // Ekstrakurikuler yang dibina
  coachAbsences     CoachAbsence[] // Absensi pembina
  classSchedules    ClassSchedule[] // Jadwal mengajar di kelas
  extracurricularMemberships ExtracurricularMember[] // Ekstrakurikuler yang diikuti

  @@map("users")
}

// Enum untuk user roles
enum UserRole {
  ADMIN
  GURU
  SISWA
  TU // Tata Usaha
  STAFF // Staff untuk absensi dan scan kartu
}

// Notification system
model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  userId    String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  REGISTRATION // User baru register
  ABSENCE      // Absensi guru/siswa
  PAYMENT      // Pembayaran siswa
  LEARNING     // Informasi pembelajaran
  SYSTEM       // System notification
}

// Absence system
model Absence {
  id        String     @id @default(cuid())
  userId    String
  date      DateTime   @default(now())
  status    AbsenceStatus
  reason    String?
  createdAt DateTime   @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("absences")
}

// Teacher Schedule System - Checklist Hari
model TeacherSchedule {
  id          String   @id @default(cuid())
  teacherId   String
  dayOfWeek   Int      // 1=Senin, 2=Selasa, ..., 7=Minggu
  subjectId   String?  // Mata pelajaran yang diajar
  room        String?  // Ruangan kelas
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher User     @relation(fields: [teacherId], references: [id])
  subject Subject? @relation(fields: [subjectId], references: [id])
  attendanceLogs TeacherAttendanceLog[]

  @@unique([teacherId, dayOfWeek])
  @@map("teacher_schedules")
}

// Teacher Attendance Log - untuk mencatat kehadiran aktual
model TeacherAttendanceLog {
  id              String           @id @default(cuid())
  teacherId       String
  scheduleId      String?          // Reference to TeacherSchedule
  date            DateTime         @default(now())
  checkInTime     DateTime?        // Waktu check in aktual
  checkOutTime    DateTime?       // Waktu check out aktual
  status          AbsenceStatus    @default(HADIR)
  notes           String?          // Catatan tambahan
  isScheduled     Boolean          @default(false) // Apakah sesuai jadwal
  overtimeHours   Float?           // Jam lembur (jika ada)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  teacher  User             @relation(fields: [teacherId], references: [id])
  schedule TeacherSchedule? @relation(fields: [scheduleId], references: [id])

  @@unique([teacherId, date])
  @@map("teacher_attendance_logs")
}

enum AbsenceStatus {
  HADIR
  SAKIT
  IZIN
  ALPHA
}

// Subject/Mata Pelajaran
model Subject {
  id          String   @id @default(cuid())
  name        String
  description String?
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher User              @relation(fields: [teacherId], references: [id])
  grades  Grade[]
  posts   LearningPost[]
  schedules TeacherSchedule[]
  classSchedules ClassSchedule[]

  @@unique([teacherId, name])
  @@map("subjects")
}

// Grade/Nilai
model Grade {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  value     Float
  semester  String
  academicYear String
  createdAt DateTime @default(now())

  // Relations
  student User    @relation(fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([studentId, subjectId, semester, academicYear])
  @@map("grades")
}

// Payment/Keuangan
model Payment {
  id          String      @id @default(cuid())
  studentId   String
  type        PaymentType
  amount      Float
  dueDate     DateTime
  paidDate    DateTime?
  status      PaymentStatus @default(PENDING)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  student User @relation(fields: [studentId], references: [id])

  @@map("payments")
}

enum PaymentType {
  SPP
  UANG_BANGUNAN
  UANG_KEGIATAN
  UANG_BUKU
  LAINNYA
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

// Learning Post/Informasi Pembelajaran
model LearningPost {
  id          String   @id @default(cuid())
  title       String
  content     String
  teacherId   String
  subjectId   String?
  attachment  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher User    @relation(fields: [teacherId], references: [id])
  subject Subject? @relation(fields: [subjectId], references: [id])

  @@map("learning_posts")
}

// Card Scan System untuk tracking absensi berbasis kartu
model CardScan {
  id          String     @id @default(cuid())
  cardId      String
  userId      String
  scanType    ScanType   @default(CHECK_IN) // CHECK_IN atau CHECK_OUT
  scanTime    DateTime   @default(now())
  location    String?    // Lokasi scan (misal: "Gerbang Utama", "Kelas 7A")
  deviceInfo  String?    // Info device yang digunakan untuk scan
  notes       String?    // Catatan tambahan
  isValid     Boolean    @default(true) // Apakah scan valid
  createdAt   DateTime   @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("card_scans")
}

enum ScanType {
  CHECK_IN  // Check in masuk
  CHECK_OUT // Check out keluar
}

// Class Management System
model Class {
  id                String   @id @default(cuid())
  name              String   // Nama kelas (misal: "VII-A", "VIII-B")
  level             String   // Tingkat kelas (misal: "VII", "VIII", "IX")
  academicYear      String   // Tahun ajaran (misal: "2024/2025")
  homeroomTeacherId String?  // ID wali kelas
  room              String?  // Ruangan kelas
  capacity          Int      @default(30) // Kapasitas maksimal
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  homeroomTeacher User?         @relation(fields: [homeroomTeacherId], references: [id])
  students        ClassStudent[]
  schedules       ClassSchedule[]

  @@unique([name, academicYear])
  @@map("classes")
}

// Class Student (Many-to-Many between Class and User)
model ClassStudent {
  id        String   @id @default(cuid())
  classId   String
  studentId String
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)

  // Relations
  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  student User  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
  @@map("class_students")
}

// Class Schedule
model ClassSchedule {
  id          String   @id @default(cuid())
  classId     String
  subjectId   String
  teacherId   String
  dayOfWeek   Int      // 1=Senin, 2=Selasa, ..., 7=Minggu
  startTime   String   // Format: "07:00"
  endTime     String   // Format: "08:30"
  room        String?
  semester    String   @default("Ganjil") // Ganjil/Genap
  academicYear String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  class   Class   @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  teacher User    @relation(fields: [teacherId], references: [id])

  @@unique([classId, subjectId, dayOfWeek, startTime])
  @@map("class_schedules")
}

// Extracurricular Management
model Extracurricular {
  id          String   @id @default(cuid())
  name        String
  description String?
  coachId     String   // Pembina/Pelatih
  schedule    String?  // Jadwal latihan (misal: "Senin & Rabu, 15:00-17:00")
  venue       String?  // Tempat latihan
  maxMembers  Int      @default(30) // Kapasitas maksimal
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  coach   User              @relation(fields: [coachId], references: [id])
  members ExtracurricularMember[]
  coachAbsences CoachAbsence[]

  @@map("extracurriculars")
}

// Extracurricular Member (Siswa yang ikut ekstrakurikuler)
model ExtracurricularMember {
  id                String   @id @default(cuid())
  extracurricularId String
  studentId         String
  joinedAt          DateTime @default(now())
  role              String   @default("Anggota") // Anggota, Ketua, Sekretaris, dll
  isActive          Boolean  @default(true)

  // Relations
  extracurricular Extracurricular @relation(fields: [extracurricularId], references: [id], onDelete: Cascade)
  student         User             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([extracurricularId, studentId])
  @@map("extracurricular_members")
}

// Coach Absence System (Absensi Pembina Ekstrakurikuler)
model CoachAbsence {
  id                String     @id @default(cuid())
  coachId           String
  extracurricularId String
  date              DateTime   @default(now())
  status            AbsenceStatus @default(HADIR)
  reason            String?
  notes             String?    // Catatan tambahan (misal: materi latihan)
  startTime         DateTime?  // Waktu mulai latihan
  endTime           DateTime?  // Waktu selesai latihan
  participantCount  Int?       // Jumlah peserta yang hadir
  createdAt         DateTime   @default(now())

  // Relations
  coach           User           @relation(fields: [coachId], references: [id])
  extracurricular Extracurricular @relation(fields: [extracurricularId], references: [id])

  @@unique([coachId, extracurricularId, date])
  @@map("coach_absences")
}